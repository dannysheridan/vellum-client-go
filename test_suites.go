// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type TestCaseVariableValueRequest struct {
	Type          string
	String        *TestCaseStringVariableValueRequest
	Number        *TestCaseNumberVariableValueRequest
	Json          *TestCaseJsonVariableValueRequest
	ChatHistory   *TestCaseChatHistoryVariableValueRequest
	SearchResults *TestCaseSearchResultsVariableValueRequest
	Error         *TestCaseErrorVariableValueRequest
}

func NewTestCaseVariableValueRequestFromString(value *TestCaseStringVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "STRING", String: value}
}

func NewTestCaseVariableValueRequestFromNumber(value *TestCaseNumberVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "NUMBER", Number: value}
}

func NewTestCaseVariableValueRequestFromJson(value *TestCaseJsonVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "JSON", Json: value}
}

func NewTestCaseVariableValueRequestFromChatHistory(value *TestCaseChatHistoryVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewTestCaseVariableValueRequestFromSearchResults(value *TestCaseSearchResultsVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewTestCaseVariableValueRequestFromError(value *TestCaseErrorVariableValueRequest) *TestCaseVariableValueRequest {
	return &TestCaseVariableValueRequest{Type: "ERROR", Error: value}
}

func (t *TestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestCaseStringVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestCaseNumberVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestCaseJsonVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestCaseChatHistoryVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestCaseSearchResultsVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestCaseErrorVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	switch t.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseStringVariableValueRequest
		}{
			Type:                               t.Type,
			TestCaseStringVariableValueRequest: t.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseNumberVariableValueRequest
		}{
			Type:                               t.Type,
			TestCaseNumberVariableValueRequest: t.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseJsonVariableValueRequest
		}{
			Type:                             t.Type,
			TestCaseJsonVariableValueRequest: t.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseChatHistoryVariableValueRequest
		}{
			Type:                                    t.Type,
			TestCaseChatHistoryVariableValueRequest: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseSearchResultsVariableValueRequest
		}{
			Type: t.Type,
			TestCaseSearchResultsVariableValueRequest: t.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseErrorVariableValueRequest
		}{
			Type:                              t.Type,
			TestCaseErrorVariableValueRequest: t.Error,
		}
		return json.Marshal(marshaler)
	}
}

type TestCaseVariableValueRequestVisitor interface {
	VisitString(*TestCaseStringVariableValueRequest) error
	VisitNumber(*TestCaseNumberVariableValueRequest) error
	VisitJson(*TestCaseJsonVariableValueRequest) error
	VisitChatHistory(*TestCaseChatHistoryVariableValueRequest) error
	VisitSearchResults(*TestCaseSearchResultsVariableValueRequest) error
	VisitError(*TestCaseErrorVariableValueRequest) error
}

func (t *TestCaseVariableValueRequest) Accept(visitor TestCaseVariableValueRequestVisitor) error {
	switch t.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		return visitor.VisitString(t.String)
	case "NUMBER":
		return visitor.VisitNumber(t.Number)
	case "JSON":
		return visitor.VisitJson(t.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(t.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(t.SearchResults)
	case "ERROR":
		return visitor.VisitError(t.Error)
	}
}

type TestSuiteTestCase struct {
	Id               *string                  `json:"id,omitempty"`
	Label            *string                  `json:"label,omitempty"`
	InputValues      []*TestCaseVariableValue `json:"input_values,omitempty"`
	EvaluationValues []*TestCaseVariableValue `json:"evaluation_values,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteTestCase) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCase(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCase) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCaseRequest struct {
	TestSuiteTestCaseRequestId *string                         `json:"id,omitempty"`
	Label                      *string                         `json:"label,omitempty"`
	InputValues                []*TestCaseVariableValueRequest `json:"input_values,omitempty"`
	EvaluationValues           []*TestCaseVariableValueRequest `json:"evaluation_values,omitempty"`
}
